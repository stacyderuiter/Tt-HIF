---
title: "Supplemental Materials for: Heat increment of feeding in the common bottlenose dolphin (*Tursiops truncatus*) is an insignificant quantity in estimating field metabolic rate"
author:
  - name: I. Koliopoulou
    affiliations:
      - ref: LU
  - name: S.L. DeRuiter
    affiliations:
      - ref: Calvin
  - name: J. Altimiras
    affiliations:
      - ref: LU
  - name: J. Larsson
    affiliations:
      - ref: KWP
  - name: J. Aranaz
    affiliations:
      - ref: FO 
  - name: D. Rosen
    affiliations:
      - ref: UBC
  - name: A. Fahlman
    affiliations:
      - ref: LU
      - ref: FO
      - ref: GDR      
affiliations:
  - id: LU
    name: Linkoping University
    city: Linkoping
    state: Sweden
  - id: Calvin
    name: Department of Mathematics and Statistics, Calvin University
    city: Grand Rapids
    state: MI USA
  - id: KWP
    name: Kolmarden Wildlife Park
    city: Kolmarden
    state: Sweden
  - id: FO
    name: Fundacion Oceanografic
    city: Valencia
    state: Spain
  - id: UBC
    name: Univeristy of British Columbia
    city: Vancouver
    state: British Columbia Canada
  - id: GDR
    name: Global Diving Research SL
    city: Valencia
    state: Spain
format: 
  html:
    embed-resources: true
  typst: default
editor: source
---

# R Setup

```{r}
#| label: setup
#| message: false

library(mgcv)
library(ggformula)
library(tidyverse)
library(readxl)
library(ggeffects)
library(pracma)
library(DHARMa)
library(gt)
library(gtsummary)
library(mixedup)

knitr::opts_chunk$set(echo = TRUE,
                      fig.width = 6,
                      fig.height = 4.5,
                      fig.path = "figures/HIF-",
                      dev = "jpeg",
                      dpi = 300)

theme_set(theme_minimal(base_size = 12))
```

# Data Preparation

```{r}
HIF_data <- read_xlsx('data/updated_data.xlsx',
                      .name_repair = 'unique_quiet') |>
  mutate(animal = factor(animal),
         day = factor(interaction(animal, date, drop = TRUE)))
```

# Model fitting

```{r}
HIF_model <- gam(oxygen_cons ~ 
                   # smooth terms
                   s(exact, k = 4, bs = "ts") +
                   s(percentdailytotal, k = 4, bs = "ts") +
                   ti(exact, percentdailytotal, k = 4, bs = "ts") + 
                   s(body_mass, k = 4, bs = "ts") +
                   s(age, k = 4, bs = "ts") + 
                   # other predictor(s)
                   sex + 
                   s(pool_temp, k = 4, bs = "ts") +
                   # random effects
                   s(animal, bs = "re") + 
                   s(day, bs = "re"),
                 data = HIF_data, 
                 method = "ML", 
                 select = TRUE)
```

Standard model summary output from `gam()`:

```{r}
summary(HIF_model)
```

A prettier model summary table:

```{r}
tbl_regression(HIF_model)
```

# Model Checking

Below are `mgcv` package checks for GAMs, presented mainly to view model convergence and basis dimension checking results.

```{r}
#| label: gam-check
#| fig-show: "hide"

gam.check(HIF_model)
```

## Residual Histogram

This graph allows us to verify the residual normality condition.

```{r}
#| label: residual-histogram

gf_dhistogram(~resid(HIF_model), bins = 15) |> 
  gf_fitdistr(dist = "dnorm")
```

## Scaled Residual Plot

The scaled residual plot (Hartig, 2024) allows verification that the mean-variance relationship is as expected, particularly for mixed-effect models and generalized linear models. If all is well, scaled residuals will be trendless and will have uniform spread between 0-1 for all fitted values.

```{r}
#| label: scaled-resids
#| message: false

plotResiduals(simulateResiduals(HIF_model), quantreg = FALSE)
```

## Residual ACF Plot

The ACF plot allows us to verify the residual independence condition.

```{r}
#| label: residual-acf

acf(resid(HIF_model))
```

# Model Interpretation

## Hypothesis Testing

Type II ANOVA allows us to test the null hypothesis of no association with the response, for each predictor (and interaction) included in the model.

```{r}
anova(HIF_model)
```

## Variance Term Estimation

For random intercept terms, by analogy with the way that mixed-effect model results are usually reported and light of the fact that we wish to control for any individual or spatio-temporal effects rather than performing hypothesis testing for them, it is possible to report the standard variance components associated with each term. These are shown here in units of standard deviation. Note that since we used maximum-likelihood estimation, these estimates may be biased for finite sample size, but since variance term estimation is not the focus of inference (and smooth term hypothesis testing is) this seems like the right choice in our case. 

```{r}
#| results: hide

vars <- invisible(gam.vcomp(HIF_model)) 

vars <- vars |>
  data.frame() |>
  mutate(
    Term = rownames(vars),
    Term = ifelse(Term == "scale", "scale (residuals)", Term)
  ) |>
rename(`Standard Deviation` = std.dev,
       `CI (lower)` = lower,
       `CI (upper)` = upper
       ) |>
  select(Term,
         `Standard Deviation`, 
         `CI (lower)`, 
         `CI (upper)`) |>
  mutate(across(where(is.numeric), function(x) signif(x, 3))) |>
  gt()
```

```{r}
vars
```

## Model predictions

Another way of visualizing the results of a GAM (or other regression model) is a prediction plot, where you select specific values at which to fix all the predictors other than `exact` time (age, proportion total calories, etc.) and then show predicted oxygen consumption given those values, and varying values of exact. Such a plot might be preferable to a partial plot because the y-axis is in terms of expected response variable values (in total, not a contribution to the whole from one predictor).

We used marginal means of "other" predictors; in this approach quantitative predictors are set to the mean value observed in the data, and for categorical predictors a weighted average across the observed values is used. The idea is to try to show the expected response value for "an average observation" (in some sense) in the actual data. For this reason, it may make the most sense as a set of predictions that can be overlaid on a plot of the data.

### Marginal Means of Model Variables

```{r}
model_vars <- c('exact',
                'percentdailytotal',
                'body_mass',
                'pool_temp',
                'age',
                'sex')

tbl_summary(
    data = HIF_data,
    statistic = list(all_continuous() ~ "{mean} ({sd})", 
                      all_categorical() ~ "{n} ({p}%)"),
    type = list(all_continuous() ~ "continuous",
                all_categorical() ~ "categorical",
                age ~ "continuous"),
    # type = assign_summary_type(variables = model_vars,
    #                            cat_threshold = 3,
    #                            value = NULL),
    include = all_of(model_vars)
  )
```


### Model Predictions

```{r}
#| label: marginal-means-preds

mmeans <- predict_response(HIF_model, terms = 'exact [0:133]',
                 margin = 'marginalmeans') 

mmeans |> 
  plot()
```


## Visualization

### Data Plot with Model Fit

#### Setup

Define colors and shapes to use for plotting

```{r}
kcal_colors <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3")
shape_vector <- c("Tt1" = 1, "Tt2" = 2, "Tt3" = 3, "Tt4" = 4, 
                  "Tt5" = 5, "Tt6" = 6, "Tt7" = 7, "Tt8" = 8)
```

#### Plot

```{r}
#| label: data-plus-gam

oxygen_time_plot <- ggplot(HIF_data, 
                           aes(x = exact, y = oxygen_cons)) +
  geom_point(aes(color = factor(kcal), shape = animal), 
             size = 1, 
             stroke = 1.2) +
  geom_line(data = mmeans,
            aes(x = x, y = predicted),
            color = 'black',
            linewidth = 2) +
  geom_ribbon(data = mmeans,
              aes(ymin = conf.low, ymax = conf.high, x = x),
              inherit.aes = FALSE,
              fill = 'grey44', alpha = 0.2) +
  labs(x = "Time (min)", 
       y = "Oxygen Consumption (L / min)", 
       color = "Energy Intake (kcal)", 
       shape = "Animal ID") +
  scale_color_manual(values = kcal_colors) +
  scale_shape_manual(values = shape_vector) +
  theme_minimal() +
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 14),
        axis.line = element_line(linewidth = 1)) +
  scale_x_continuous(breaks = seq(0, 120, by = 20)) +
  scale_y_continuous(breaks = seq(0, 2, by = 0.2))

print(oxygen_time_plot)
```

### Area Under Curve

The calculations below show the AUC under the black line in the graph above.

For additional reference if needed, the initial value of oxygen consumption at time 0 is: `r mmeans$predicted[mmeans$x == 0]`

To find the cumulative area under the curve, using the marginal mean expected $0_2$ consumption values, we could do something like:

```{r}
predicted_AUC <- data.frame(minutes = mmeans$x,
                            AUC = cumtrapz(x = mmeans$x,
                                           y = mmeans$predicted))
max(predicted_AUC$AUC)
```

The total at 130 minutes is: `r max(predicted_AUC$AUC)`. Below the cumulative sums are shown:

```{r}
#| label: cum-auc

ggplot(predicted_AUC,
       aes(x = minutes, y = AUC)) +
  geom_path()
```

To compute this quantity with uncertainty, we would probably employ a parametric bootstrap (not done yet).

# References

Hartig F (2024). *DHARMa: Residual Diagnostics for Hierarchical (Multi-Level / Mixed) Regression Models*. R package version 0.4.7, <https://CRAN.R-project.org/package=DHARMa>.
